 <%# ビューファイルを編集しましょう
new.html.erbが新規投稿ページであるとわかるように記述しましょう。 %>

<%# app/views/posts/new.html.erb %>

<h1>新規投稿ページ</h1>
<%= form_with url: "/posts", method: :post, local: true do |form| %>
  <%= form.text_field :content %>
  <%= form.submit '投稿する' %>
<% end %>

<%# 
form_with	投稿ページなどにおけるフォームの実装
link_to	リンクの実装
これ以外にもたくさんのヘルパーメソッドが存在します。自作することも可能です。

今回がフォームの実装なので、form_withメソッドを使用します。 %>
<%# なぜヘルパーメソッドを使うのでしょうか？

それには以下のような理由があります。

パスの指定やRubyの埋め込みなどの記述がシンプルになるため
セキュリティ上の問題を解消するため %>
<%# 
form_withは、doからendまでの間がフォームの記述になります。
したがって、do〜endの間に、表示される投稿フォームの内容を記述していきます。
1行目のform_withの引数のurl: "/posts", method: :post, local: trueという記述はオプションと呼ばれ、それぞれフォームがどのような動作を行うかを決めています。

オプション名	説明
urlオプション	フォームの情報を送るリクエストのパスを指定
methodオプション	フォームの情報を送るリクエストのHTTPメソッドを指定。オプションの初期値は:postなので、postメソッドを指定する場合は省略することが可能
localオプション	リモート送信を無効にするかどうかを指定。trueにすると無効になる
2~3行目の

<%# <%= form.text_field :content %>
<%# 〜<%= form.submit '投稿する'  %>
<%# という記述では、ビューに表示されるフォームの部品を生成しています。 %>

<%# 
text_field	1行のテキストボックス
password_field	パスワード入力ボックス（入力したテキストがアスタリスクなどに置き換えて表示される）
check_box	チェックボックス（複数選択可能）
radio_button	ラジオボタン（複数の中から1つしか選択できない）
submit	送信ボタン %>